/*
 * File:   Lab02.c
 * Author: Rodrigo García 19085
 *
 * Created on 28 de enero de 2021, 04:40 PM
 */


// PIC16F887 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = EXTRC_CLKOUT// Oscillator Selection bits (RC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, RC on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

/*
 INCLUIR LIBRERIAS CREADAS
 */

#include <xc.h>
#include "7Segmentos.h"
#include "Oscilador.h"

/*
 VARIABLES
 */

#define SUM RB0
#define RES RB1

char FLAG1;
char FLAG2;
char DECDSUM;
char DECDRES;



/*
 FUNCIONES
 */
void ContadorSum(void);
void ContadorRes(void);
void Setup(void);



void __interrupt() isr(void){
    if (INTCONbits.TMR0IF == 1){
        INTCONbits.TMR0IF = 0;
        TMR0=256;
    }
}

/*
 MAIN LOOP
 */

void main(void) {
    INTOSC8MHZ();    
    Setup();
        while(1){
        
    }
   
}

void setup(void){
    PORTA = 0;
    PORTB = 0;
    PORTC = 0;
    PORTD = 0;
    PORTE = 0;
    
    ANSEL = 0;
    ANSELH = 0;
    
    TRISA = 0b00000001;
    TRISB = 0b00000011;
    TRISC = 0;
    TRISD = 0;
    TRISE = 0;
}



void ContadorSum(void) {
    if (DECDSUM==1){ //SI MI VARIABLE DECDSUM ES IGUAL A 1
        PORTD=1;      //ENCIENDO EL PRIMER BIT DEL PUERTOC
    }
        else if (DECDSUM>1 && DECDSUM<8){ //SI MI VARIABLE DECDSUM ES MAYOR A 1 Y MENOR QUE 8
            PORTD=PORTD<<1;                 //REALIZO UN SHIFT A LA IZQUIERDA EN EL PUERTOC PARA MOVER EL BIT ENCENDIDO AL SIGUIENTE 
    }           
        else if (DECDSUM==8){  //SI MI VARIABLE DECDSUM ES IGUAL A 8
            DECDSUM=0;         //INDICO A MI VARIABLE QUE NUEVAMENTE TENGA EL VALOR 0
            RD6=0;              //APAGO EL PIN RC6
            RD7=1;              //ENCIENDO EL PIN RC7
            FLAG1=0;             //APAGO MI BANDERA "FLAG" PARA BLOQUEAR LOS BOTONASOS DEL JUGADOR2 Y ASÍ FINALIZAR EL JUEGO HASTA QUE SE PRESIONE "START"
    }            
}

void ContadorRes(void){
    if (DECDRES==1){ //SI MI VARIABLE DECDSUM ES IGUAL A 1
        PORTD=1;      //ENCIENDO EL PRIMER BIT DEL PUERTOC
    }
        else if (DECDRES>1 && DECDRES<8){ //SI MI VARIABLE DECDSUM ES MAYOR A 1 Y MENOR QUE 8
            PORTD=PORTD>>1;                 //REALIZO UN SHIFT A LA DERECHA EN EL PUERTOC PARA MOVER EL BIT ENCENDIDO AL SIGUIENTE 
    }           
        else if (DECDRES==8){  //SI MI VARIABLE DECDSUM ES IGUAL A 8
            DECDRES=0;         //INDICO A MI VARIABLE QUE NUEVAMENTE TENGA EL VALOR 0
            RD6=1;              //APAGO EL PIN RC6
            RD7=0;              //ENCIENDO EL PIN RC7
            FLAG2=0;             //APAGO MI BANDERA "FLAG" PARA BLOQUEAR LOS BOTONASOS DEL JUGADOR2 Y ASÍ FINALIZAR EL JUEGO HASTA QUE SE PRESIONE "START"
    }                
}