/*
 * File:   Lab02.c
 * Author: Rodrigo Garc√≠a 19085
 *
 * Created on 28 de enero de 2021, 04:40 PM
 */





// PIC16F887 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>

#include "7Segmentos.h"
#include "Oscilador.h"

/*
 VARIABLES
 */

#define SUM RB0
#define RES RB1

char FLAG1;
char FLAG2;
char DECADA;



/*
 FUNCIONES
 */
void Setup(void);



void __interrupt() isr(void){
    if (INTCONbits.TMR0IF == 1){
        INTCONbits.TMR0IF = 0;
        TMR0=236;
    }
}

/*
 MAIN LOOP
 */

void main(void) {
    initOsc(20);    
    Setup();
        while(1){
            if(SUM == 1){
                FLAG1=1;
            }
                if(FLAG1 == 1 && SUM == 0){
                    FLAG1=0;
                    PORTD++;
                }     
                if(RES==1){
                    FLAG2=1;
                }
                if(FLAG2==1 && RES==0){
                    FLAG2=0;
                    PORTD--;
                }     
            }
        }      
    


void Setup(void){
    PORTA = 0;
    PORTB = 0;
    PORTC = 0;
    PORTD = 0;
    PORTE = 0;
    
    ANSEL = 0;
    ANSELH = 0;
    
    TRISA = 0b00000001;
    TRISB = 0b00000011;
    TRISC = 0;
    TRISD = 0;
    TRISE = 0;
}

