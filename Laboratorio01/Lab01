/*
 * File:   Lab01.c
 * Author: Rodrigo Garc√≠a 19085
 *
 * Created on 21 de enero de 2021
 */

// PIC16F887 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = EXTRC_CLKOUT// Oscillator Selection bits (RC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, RC on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>

/*
 VARIABLES
 */
#define LEDR  RE0
#define LEDA  RE1 
#define LEDV  RE2 
#define START RB0
#define PJ1   RB1
#define PJ2   RB2
#define _XTAL_FREQ 8000000

char ESTADO;

/*
 FUNCIONES
 */
void Setup(void);
void Semaforo (void);
void Jugador1 (void);
void Jugador2 (void);
void PushSemaforo (void);

/*
 MAIN
 */

void main(void) {
    Setup();
    while (1){
        PushSemaforo();

    }
}

/*
 SETUP
 */

void Setup(void) {
    ANSEL = 0;
    ANSELH = 0;
    
    TRISB = 1;
    TRISC = 0;
    TRISD = 0;
    TRISE = 0;
    PORTA = 0;
    PORTB = 0;    
    PORTC = 0;
    PORTD = 0;
    PORTE = 0;
    OPTION_REG = 0b10000000;
     
}


void Semaforo(void){
        LEDR = 1;
        LEDA = 0;
        LEDV = 0; 
        __delay_ms(200);
        LEDR = 0;
        LEDA = 1;
        LEDV = 0; 
        __delay_ms(200);
        LEDR = 0;
        LEDA = 0;
        LEDV = 1; 
        __delay_ms(200);
        LEDR = 0;
        LEDA = 0;
        LEDV = 0;         
}


void Jugador1 (){
    
}


void Jugador2 (){
    
}


void PushSemaforo (void){
    while (1){
        if (START == 1){
            Semaforo();
        }

    }
}