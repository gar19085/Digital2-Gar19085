/*
 * File:   Lab01.c
 * Author: Rodrigo Garc√≠a 19085
 *
 * Created on 21 de enero de 2021
 */

// PIC16F887 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = EXTRC_CLKOUT// Oscillator Selection bits (RC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, RC on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>

/*
 VARIABLES
 */
#define LEDR  RE0
#define LEDA  RE1 
#define LEDV  RE2 
#define START RB0
#define PJ1   RB1
#define PJ2   RB2
#define WIN1  RB6
#define WIN2  RB7
#define _XTAL_FREQ 8000000

char FLAG;
char DECADAJ1;
char DECADAJ2;
char J1, J2;


/*
 FUNCIONES
 */
void Setup(void);
void Semaforo (void);
void PushSemaforo (void);
void CONTADORJ1(void);
void CONTADORJ2(void); 

/*
 MAIN LOOP
 */

void main(void){
    Setup();
    while (1){
        if(START==1){
            Semaforo();
            } 
        
        if (FLAG == 1){
            if (PJ1==1){
            J1 = 1;     
        }
            else {
                if (J1==1 && PJ1==0){
                J1=0;
                DECADAJ1++;
                CONTADORJ1();
            }
            }
    }
        if (FLAG==1){
            if (PJ2==1){
            J2=1;    
        }
            else {
                if (J2==1 && PJ2==0){
                J2=0;
                DECADAJ2++;
                CONTADORJ2();            
            }
            }
        }    
    }
}

/*
 SETUP
 */

void Setup(void){
    ANSEL = 0;
    ANSELH = 0;
    TRISA = 1;
    TRISB = 0b00000111;
    TRISC = 0;
    TRISD = 0;
    TRISE = 0;
    PORTA = 0;
    PORTB = 0;    
    PORTC = 0;
    PORTD = 0;
    PORTE = 0;
    OPTION_REG = 0b10000000;
     
}


void Semaforo(void){
    PORTC=0;
    PORTD=0;
    WIN1=0;
    WIN2=0;
        LEDR = 1;
        LEDA = 0;
        LEDV = 0; 
        __delay_ms(100);
        LEDR = 0;
        LEDA = 1;
        LEDV = 0; 
        __delay_ms(100);
        LEDR = 0;
        LEDA = 0;
        LEDV = 1; 
        FLAG=1;
        __delay_ms(100);
        LEDR = 0;
        LEDA = 0;
        LEDV = 0;        
}


void CONTADORJ1(void){
    if (DECADAJ1==1){
        PORTC=1;
    }
        else if (DECADAJ1>1 && DECADAJ1<8){
            PORTC=PORTC<<1;       
    }           
        else if (DECADAJ1==8){
            DECADAJ1=0;     
            RC6=0;
            RC7=1;
            WIN1=1;
            FLAG=0;
    }            
}


void CONTADORJ2(void){
    if (DECADAJ2==1){
        PORTD=1;
    }
    else if (DECADAJ2 > 1 && DECADAJ2 < 8){
        PORTD=PORTD<<1;       
    }
    else if (DECADAJ2 == 8){
        DECADAJ2=0;  
        RD6=0;
        RD7=1;        
        WIN2=1;
        FLAG=0;
    }            
}

